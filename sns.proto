// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package csce662;

import "google/protobuf/timestamp.proto";

// The messenger service definition.
service SNSService{

  rpc Login (Request) returns (Reply) {}
  rpc List (Request) returns (ListReply) {}
  rpc Follow (Request) returns (Reply) {}
  rpc UnFollow (Request) returns (Reply) {}
  // Bidirectional streaming RPC
  rpc Timeline (stream Message) returns (stream Message) {}
}

message ListReply {
  repeated string all_users = 1;
  repeated string followers = 2;
}

message Request {
  string username = 1;
  repeated string arguments = 2;
}

message Reply {
  string msg = 1;
}

message Message {
  //Username who sent the message
  string username = 1;
  //Message from the user
  string msg = 2;
  //Time the message was sent
  google.protobuf.Timestamp timestamp = 3;
}

// ------------------------------------------------------------
// The coordinator service definition
// These are the different functionalities exposed by service
// ------------------------------------------------------------

//Init and Heartbeat potentially redundant
service CoordService{
  rpc Heartbeat (ServerInfo) returns (Confirmation) {}
  rpc GetServer (ID) returns (ServerInfo) {}
  // ZooKeeper API here
  rpc Create (ServerInfo) returns (Confirmation) {}
  rpc Exists (ID) returns (Confirmation) {}
  rpc GetSlaveServer (ID) returns (ServerInfo) {}
  rpc GetAllFollowerServers (ID) returns (ServerList) {}
}

//server info message definition
message ServerInfo{
  int32 clusterID = 1;
  int32 serverID = 2;
  string hostname = 3;
  string port = 4;
  string type = 5;
}

//confirmation message definition
message Confirmation{
  bool status = 1;
}

//id message definition
message ID{
  int32 id = 1;
}

message ServerList{
  int32 size = 1;
  repeated int32 serverID = 2;
  repeated string hostname = 3;
  repeated string port = 4;
  repeated string type = 5;
}

// ------------------------------------------------------------
// The follower synchronizer service definition
// These are the different functionalities exposed by service
// ------------------------------------------------------------

//TODO:
//potentially add a wake up synchronization rpc to be made from
//coordinator when it detects a server reconnects after being off
service SynchService{
  rpc GetAllUsers (Confirmation) returns (AllUsers) {}
  rpc GetTL (ID) returns (TL) {}
  rpc GetFL (ID) returns (FL) {}
  rpc ResynchServer (ServerInfo) returns (Confirmation) {}
}

//list of all users known of by given follower synchronizer
message AllUsers{
  repeated string users = 1;
}

//repeated string lists of each entry in a users

//Timeline (TL)
message TL{
  bool status = 1;
  repeated string TL = 2;
}

//Follower List (FL)
message FL{
  bool status = 1;
  repeated string FL = 2;
}